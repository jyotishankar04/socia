// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

enum Role {
  ADMIN
  USER
}

enum Provider {
  GOOGLE
  GITHUB
}

enum MessageRole {
  USER
  ASSISTANT
}
enum Platform {
  LINKEDIN
  X
  THREADS
}
enum PostStatus {
  PUBLISHED
  SCHEDULED
  DRAFT
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  avatar   String?
  role     Role
  isVerified Boolean @default(false) @map("is_verified")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sessions Session[]
  conversations Conversation[]
  posts Post[]

  @@map("users")
}

model UserIdentity {
  id           String @id @default(uuid())
  userId       String @map("user_id")
  provider     Provider  @map("provider")
  providerUserId   String @map("provider_user_id")

  lastLoginAt  DateTime @map("last_login_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")  

  @@map("user_identities")
}

model EmailOtp{
  id           String @id @default(uuid())
  userId       String @map("user_id")
  code         String @map("code")
  is_used      Boolean @map("is_used")
  expiresAt    DateTime @map("expires_at")

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("email_otp")
}



model Session {
  id           String @id @default(uuid())
  userId       String @map("user_id")

  userAgent String

  loginTime DateTime @map("login_time")
  lastLogin DateTime @map("last_login")

  isActive  Boolean @default(true)

  expiresAt DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}


model Conversation {
  id           String       @id @default(uuid())
  userId       String   @map("user_id")
  title        String?  
  messages     Message[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  platform     Platform  @default(LINKEDIN)
  posts        Post[]

  user         User         @relation(fields: [userId], references: [id])

  @@map("conversations")
}

model Message {
  id              String       @id @default(uuid())
  conversationId  String       @map("conversation_id")
  role            MessageRole 
  content         String 
  metadata        Json?        // e.g. tone, length, hashtags preferences
  post            Post?        // only for assistant messages
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  conversation    Conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
}

model Post {
  id              String       @id @default(uuid())
  messageId       String       @unique @map("message_id")
  userId          String       @map("user_id")
  conversationId  String       @map("conversation_id")
  platform        Platform
  content         String
  hashtags        String[]
  engagement      Json?        // {"views": "12.4K", "likes": 200}
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  publishedAt     DateTime? @map("published_at")
  scheduledAt     DateTime? @map("scheduled_at")

  status          PostStatus   @default(DRAFT)

  isLastConversationPost Boolean @map("is_last_conversation_post")

  message         Message      @relation(fields: [messageId], references: [id])
  user            User         @relation(fields: [userId], references: [id])
  conversation    Conversation @relation(fields: [conversationId], references: [id])

  @@map("posts")
}